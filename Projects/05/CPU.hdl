// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // MUX1
    Not(in=instruction[15], out=NotInstr);
    Mux16(a= ALUout, b= instruction, sel=NotInstr, out=Mux1out);

    // Reg A
    Or(a=NotInstr, b=instruction[5], out=Aload);
    ARegister(in=Mux1out, load=Aload,out= Aout, out[0..14] = addressM);

    // MUX2
    And(a= instruction[15], b=instruction[12], out= AMsel);
    Mux16(a=Aout, b=inM, sel= AMsel, out= Mux2out);

    // D
    And(a=instruction[15], b=instruction[4], out=Dload);
    DRegister(in=ALUout, load=Dload, out=Dout);

    // ALU
    ALU(x=Dout, y=Mux2out, zx= instruction[11], nx=instruction[10], zy= instruction[9], ny=instruction[8], 
    f=instruction[7], no=instruction[6] ,out=outM, out=ALUout, zr=zr,ng=ng); 

    And(a=instruction[1], b=instruction[15], out=ZRout);
    And(a=ZRout, b=zr, out=zrOut);
    And(a=instruction[2], b=instruction[15], out=NGout);
    And(a=NGout, b=ng, out=ngOut);
    Not(in=zr, out=NotZR);
    Not(in=ng, out=NotNG);
    And(a=instruction[0], b=instruction[15], out=AndOut);
    And(a=NotZR, b=NotNG, out=NotZRNG);
    And(a=AndOut, b=NotZRNG, out=G0out);

    // WRITEM
    And(a=instruction[15], b=instruction[3], out=writeM);
    Or(a=ngOut, b=zrOut, out=ZRNGload);
    Or(a=ZRNGload, b=G0out, out=jumpload);

    // PC
    Not(in=jumpload, out=Notjump);
    PC(in=Aout,load=jumpload,inc=Notjump,reset=reset,out[0..14]=pc); 




}